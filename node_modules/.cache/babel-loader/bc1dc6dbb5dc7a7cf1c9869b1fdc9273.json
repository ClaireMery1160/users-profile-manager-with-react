{"ast":null,"code":"export default class PokemonService {\n  static getPokemons() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static getPokemon(id) {\n    return fetch(`http://localhost:3001/pokemons/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.log(error);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/c_mer/OneDrive/Documents/formations/Udemy_React/react-profiles-app/src/services/pokemon-service.ts"],"names":["PokemonService","getPokemons","fetch","then","response","json","catch","error","handleError","getPokemon","id","data","isEmpty","Object","keys","length","console","log"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAAqB;AAEhB,SAAXC,WAAW,GAAuB;AACvC,WAAOC,KAAK,CAAC,gCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFX,CAAP;AAGD;;AAEgB,SAAVE,UAAU,CAACC,EAAD,EAAoC;AACnD,WAAOR,KAAK,CAAE,kCAAiCQ,EAAG,EAAtC,CAAL,CACJP,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECQ,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAqB,IAArB,GAA4BA,IAFrC,EAGJL,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP;AAID;;AAEa,SAAPK,OAAO,CAACD,IAAD,EAAwB;AACpC,WAAOE,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,KAA6B,CAApC;AACD;;AAEiB,SAAXP,WAAW,CAACD,KAAD,EAAoB;AAClCS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACH;;AArBiC","sourcesContent":["import Pokemon from \"../models/pokemon\";\r\n \r\nexport default class PokemonService {\r\n \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n  }\r\n \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n  }\r\n \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n\r\n  static handleError(error: Error):void {\r\n      console.log(error);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}